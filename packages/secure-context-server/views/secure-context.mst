<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{{ action.title }}</title>
    <link rel="stylesheet" type="text/css" href="/action.css">
  </head>
  <body>
    <main class="ActionForm">
      <h1 class="ActionTitle">{{ action.title }}</h1>
      <p class="ActionBody">...</p>
      <div class="Buttons">
        <button class="Button Button--confirm">CONFIRM</button>
        <button class="Button Button--reject">REJECT</button>
      </div>
    </main>

    <script>
      var globalSecureContextAction = {};
      ((exports) => {
        {{{action.code}}}
      })(globalSecureContextAction);

      ((action) => {
        const bodyEl = document.querySelector('.ActionBody');
        const confirmButtonEl = document.querySelector('.Button--confirm');
        const rejectButtonEl = document.querySelector('.Button--reject');

        function template(str, data) {
          const lookupByPath = ([first, ...rest], d) => {
            if (!first || !d) {
              return d;
            }
            return lookupByPath(rest, d[first]);
          };

          return str.replace(/\{\{(.*?)\}\}/, (_, path) => {
            return lookupByPath(path.trim().split('.'), data);
          });
        }

        function sendResult(result, payload) {
          console.log('Sending Result');
          (window.opener || window.parent).postMessage({
            type: 'secure-context-response',
            result,
            payload,
          }, '{{{appOrigin}}}');
          window.close();
        }

        let responded = false;
        async function handleResponse(confirmed, data) {
          console.log(
            `User ${confirmed ? 'confirmed' : 'rejected'} the request`,
          );
          if (responded) {
            return;
          }
          responded = true;
          confirmButtonEl.disabled = true;
          rejectButtonEl.disabled = true;

          if (!confirmed) {
            sendResult('rejected', {});
            return;
          }

          try {
            const response = await action.handler(data);
            sendResult('response', response);
          } catch (error) {
            sendResult('error', error);
          }
        }

        function showPrompt(data) {
          const body = template(action.body, data);
          bodyEl.textContent = body;
          confirmButtonEl.onclick = () => handleResponse(true, data);
          rejectButtonEl.onclick = () => handleResponse(false, data);
        }

        let receivedData = false;
        window.addEventListener('message', event => {
          if (receivedData) {
            return;
          }
          const { data } = event;
          if (data.type === 'secure-context-data') {
            receivedData = true;
            showPrompt(data.payload);
          }
        });

        (window.opener || window.parent).postMessage({
          type: 'secure-context-ready',
        }, '{{{appOrigin}}}');
      })(globalSecureContextAction);
    </script>
  </body>
</html>
